mod gen;
mod git;
mod patch;
mod schema;

fn main() {
    let schema_path =
        std::env::var("SC_PATH").expect("Expected `SC_PATH` variable set (path to schema)");

    let schema = schema::Schema::load(&schema_path);
    let schema = patch::patch_sc(schema);

    let action = std::env::var("ACTION").expect("Expected `ACTION` variable set (action to do)");

    match action.as_str() {
        "0" => {
            let payloads_path =
                std::env::var("PL_PATH").expect("Expected `PL_PATH` variable set (path to payloads)");

            payloads_main(schema, &payloads_path);        
        },
        "1" => echo_payloads_modrs_and_settersrs_content(schema),
        _ => unimplemented!("Unknown action"),
    }
}

fn payloads_main(schema: schema::Schema, payloads_path: &str) {
    use std::{fs::OpenOptions, io::Write, path::PathBuf};

    let commit = git::cur_commit();

    let header = format!("// This file is auto generated by `cg` <https://github.com/teloxide/cg> ({commit}).\n// **DO NOT EDIT THIS FILE**,\n// edit `cg` instead.\n", commit = commit);

    let mut content = Vec::new();
    for payload in gen::Payload::generate(&schema) {
        let path = PathBuf::from(payloads_path).join(&payload.file_name);

        let mut file = OpenOptions::new()
            .write(true)
            .create(true)
            .truncate(true)
            .open(&path)
            .expect(&format!("Failed to open {:?}", path));

        content.extend_from_slice(header.as_bytes());
        content.extend_from_slice(payload.content.as_bytes());

        file.write_all(&content).expect("Write failed");

        content.clear();
    }
}

fn echo_payloads_modrs_and_settersrs_content(schema: schema::Schema) {
    let commit = git::cur_commit();
    print!("// This block is auto generated by `cg` <https://github.com/teloxide/cg> ({commit}).\n// **DO NOT EDIT THIS BLOCK**,\n// edit `cg` instead.\n", commit = commit);
    schema
        .methods
        .iter()
        .for_each(|m| println!("mod {};", m.names.2));
    println!();
    schema
        .methods
        .iter()
        .for_each(|m| println!("pub use {m}::{{{M}, {M}Setters}};", m = m.names.2, M = m.names.1));
    
    println!(); println!(); println!();

    println!("// This file is auto generated by `cg` <https://github.com/teloxide/cg> ({commit}).\n// **DO NOT EDIT THIS FILE**,\n// edit `cg` instead.\n", commit = commit);
    println!("pub use crate::payloads::{{");
    schema
        .methods
        .iter()
        .for_each(|m| println!("    {M}Setters as _,", M = m.names.1));
    println!("}};");
}
